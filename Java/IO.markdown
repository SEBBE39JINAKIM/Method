# 콘솔 출력
출력하기 : System.out.print()
System.out.print() 메서드는 소괄호 안의 내용을 단순히 출력하기만 하고, 줄바꿈을 하지 않습니다.

출력하고 줄 바꾸기 : System.out.println()
System.out.println() 메서드는 소괄호 안의 내용을 콘솔에 출력하고 줄바꿈을 합니다. print뒤에 붙은 ln은 line을 의미합니다.
System.out.println(”Kim Coding")을 실행하면 소괄호 안의 ”Kim Coding"이 출력되고 커서는 다음 줄로 이동합니다.


형식대로 출력하기 System.out.printf()
System.out.printf()는 지시자(specifier, 형식 지정자)를 이용해 변수의 값을 여러 형식으로 출력해주는 메서드입니다. 지시자는 이름 그대로 값을 어떤 형식으로 출력할 것인지를 지정하기 위해 사용합니다. f는 formatted의 약자입니다.

지시자는 실제로 출력되는 값이 아니며, 값을 변환해 자신의 위치에 출력해주는 기능을 합니다. 자바에서 사용할 수 있는 지시자는 아래와 같습니다. 다시 한 번 강조하지만, 아래 지시자들을 외우려고 하지 마세요! 만약 여러분들이 학습을 진행하시다가 문자열을 출력해야 하는 경우가 발생한다면, 문자열을 출력할 수 있는 지시자를 다시 찾아보고, 찾아본 것을 적용해보면서 익숙해지면 됩니다.

지시자	출력 포맷
%b	불리언
%d	10진수
%o	8진수
%x, %X	16진수
%c	문자
%s	문자열
%n	줄바꿈

# 콘솔 입력
import java.util.Scanner;

데이터를 입력받는 기능을 작은 프로그램으로 만들어둔 것이 Scanner입니다. 이 Scanner는 java.util이라는 위치에 저장되어져 있는데, Scanner를 사용하려면 먼저 여러분이 작성하고 있는 소스코드 안으로 Scanner를 불러와야 합니다. 즉, import java.util.Scanner;는 ‘java.util에 있는 Scanner를 이 소스 코드로 불러와라’라는 의미가 됩니다.

Scanner scanner = new Scanner(System in);

위에서 불러온 Scanner는 클래스입니다. 클래스는 이후에 자세하게 배울 것이지만 여기에서 여러분들의 이해를 돕기 위해 가볍게 설명하겠습니다. 클래스는 객체를 찍어낼 수 있는 일종의 틀이며, 우리가 사용하고자 하는 Scanner 클래스의 데이터 입력 기능은 Scanner 클래스 자체가 아니라, 그것을 통해 만들어낸 객체에 존재합니다. 따라서 데이터 입력 기능을 사용하려면 Scanner 클래스를 통해 객체를 먼저 만들어야 합니다.

클래스를 통해 객체를 만들어 낼 때에는 new 연산자를 사용하며, 그 결과물로 만들어진 객체를 인스턴스라고 합니다. 이렇게 클래스에 new 연산자를 적용하여 인스턴스를 만드는 것을 ‘클래스를 인스턴스화한다'고 표현합니다. 자세한 내용은 추후 객체지향 프로그래밍을 학습하면서 배워보도록 하겠습니다.

정리하자면, 위의 코드는 불러온 Scanner 클래스를 new 연산자를 통해 인스턴스를 생성하고, 생성된 인스턴스를 변수 scanner에 할당하는 코드입니다. 이제 데이터를 입력 받기 위한 준비 과정이 끝났습니다.

String inputValue = scanner.nextLine();

위에서 Scanner 클래스를 인스턴스화한 scanner에는 nextLine()이라는 메서드가 존재합니다. 이 메서드는 콘솔을 통해 문자열 데이터를 입력 받는 기능을 수행합니다. 즉 scanner.nextLine()은 문자열을 입력받기 위한 코드이며, 입력받은 문자열은 inputValue라는 변수에 할당되어 저장됩니다.

참고로, scanner에는 문자열을 입력받는 nextLine()뿐만 아니라, 정수형을 입력받을 수 있는 nextInt(), 실수형을 입력받을 수 있는 nextFloat()등의 메서드들도 존재합니다.

